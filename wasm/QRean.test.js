import * as t from "https://deno.land/std/testing/asserts.ts";
import { QRean } from "./QRean.js";

const imgdata2s = (imgd, step = 1) => {
  const ss = [];
  const width = imgd.width;
  const height = imgd.height;
  const data = imgd.data;
  for (let y = 0; y < height; y += step) {
    for (let x = 0; x < width; x += step) {
      const idx = (x + y * width) * 4;
      if (data[idx]) {
        ss.push("1");
      } else {
        ss.push("0");
      }
    }
    ss.push("\n");
  }
  return ss.join("");
};

Deno.test("mQR", async () => {
  const qrean = await QRean.create();
  const imgd = qrean.make("test", QRean.TYPE_MQR, QRean.DATA_TYPE_AUTO);
  t.assertEquals(imgd.width, 92);
  t.assertEquals(imgd.height, 92);
  t.assertEquals(imgdata2s(imgd, 4), `11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11110000000101010101111
11110111110111100111111
11110100010101010111111
11110100010101000011111
11110100010100110101111
11110111110101011011111
11110000000110100011111
11111111111100011011111
11110111100101100001111
11111111101101011011111
11110010111001100111111
11111110001100100011111
11110101011000001001111
11111111010110100011111
11110110101100000011111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
`);
});
Deno.test("rMQR", async () => {
  const qrean = await QRean.create();
  const imgd = qrean.make("test", QRean.TYPE_RMQR, QRean.DATA_TYPE_AUTO);
  t.assertEquals(imgd.width, 204);
  t.assertEquals(imgd.height, 60);
  t.assertEquals(imgdata2s(imgd, 4), `111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
111100000001010101010101000101010101010101010001111
111101111101101001101101010111001011011001110101111
111101000101010010100001000001101111111000000001111
111101000101100101101000011010100110111111011101111
111101000101110010101010000100010101100011010101111
111101111101000001011001010100011011011001011101111
111100000001010101010101000101010101010101000001111
111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
`);
});
