import * as t from "https://deno.land/std/testing/asserts.ts";
import { Qrean } from "./Qrean.ts";

const imgdata2s = (imgd, step = 1) => {
  const ss = [];
  const width = imgd.width;
  const height = imgd.height;
  const data = imgd.data;
  for (let y = 0; y < height; y += step) {
    for (let x = 0; x < width; x += step) {
      const idx = (x + y * width) * 4;
      if (data[idx]) {
        ss.push("1");
      } else {
        ss.push("0");
      }
    }
    ss.push("\n");
  }
  return ss.join("").trim();
};

Deno.test("mQR", async () => {
  const qrean = await Qrean.create();
  const imgd = qrean.make("test", {
    code_type: Qrean.CODE_TYPE_MQR,
    data_type: Qrean.DATA_TYPE_8BIT,
    qr_maskpattern: Qrean.QR_MASKPATTERN_1,
    qr_errorlevel: Qrean.QR_ERRORLEVEL_L,
    scale: 1,
    padding: 2,
  });
  t.assertEquals(imgd.width, 19);
  t.assertEquals(imgd.height, 19);

  // based on `qrencode -s 1 -8 -M -l L -t XPM test | tr 'FB' '01'`
  t.assertEquals(imgdata2s(imgd), `
1111111111111111111
1111111111111111111
1100000001010101011
1101111101011010011
1101000101000110011
1101000101010100111
1101000101011001011
1101111101101101011
1100000001100011011
1111111111000010111
1100001100100100011
1111011011010101011
1101101011011010011
1110001011110100111
1101000011011110011
1111000001101011011
1101010001000011011
1111111111111111111
1111111111111111111
`.trim());
});

Deno.test("rMQR", async () => {
  const qrean = await Qrean.create();
  const imgd = qrean.make("test", Qrean.CODE_TYPE_RMQR);
  t.assertEquals(imgd.width, 204);
  t.assertEquals(imgd.height, 60);
  t.assertEquals(imgdata2s(imgd, 4), `
111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
111100000001010101010101000101010101010101010001111
111101111101101001101101010111001011011001110101111
111101000101010010100001000001101111111000000001111
111101000101100101101000011010100110111111011101111
111101000101110010101010000100010101100011010101111
111101111101000001011001010100011011011001011101111
111100000001010101010101000101010101010101000001111
111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111
`.trim());
});
